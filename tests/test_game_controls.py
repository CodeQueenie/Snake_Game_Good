import pytest
import pygame
from unittest.mock import patch
from game import Game

class TestGame(Game):
    def __init__(self, screen):
        super().__init__(screen)
        self.is_paused = False
        self.is_new_game = False
        self.is_saved = False
        self.is_admin_panel_open = False

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_p:
                    self.is_paused = True
                elif event.key == pygame.K_r:
                    self.is_paused = False
                elif event.key == pygame.K_x and event.mod & pygame.KMOD_CTRL:
                    pygame.quit()
                    exit()
                elif event.key == pygame.K_n and event.mod & pygame.KMOD_CTRL:
                    self.is_new_game = True
                elif event.key == pygame.K_s and event.mod & pygame.KMOD_CTRL:
                    self.is_saved = True
                elif event.key == pygame.K_a and event.mod & pygame.KMOD_CTRL:
                    self.is_admin_panel_open = True

@pytest.fixture
def game():
    pygame.init()
    screen = pygame.display.set_mode((800, 600))
    return TestGame(screen)

def test_pause_game(game):
    """
    Test pausing the game using the P key.
    """
    pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_p))
    game.handle_events()
    assert game.is_paused

def test_resume_game(game):
    """
    Test resuming the game using the R key.
    """
    pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_r))
    game.handle_events()
    assert not game.is_paused

def test_exit_game(game):
    """
    Test exiting the game using CTRL-X.
    """
    with patch("builtins.exit", side_effect=SystemExit):
        pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_x, mod=pygame.KMOD_CTRL))
        with pytest.raises(SystemExit):
            game.handle_events()

def test_new_game(game):
    """
    Test starting a new game using CTRL-N.
    """
    pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_n, mod=pygame.KMOD_CTRL))
    game.handle_events()
    assert game.is_new_game

def test_save_game(game):
    """
    Test saving the game using CTRL-S.
    """
    pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_s, mod=pygame.KMOD_CTRL))
    game.handle_events()
    assert game.is_saved

def test_open_admin_panel(game):
    """
    Test opening the admin panel using CTRL-A.
    """
    pygame.event.post(pygame.event.Event(pygame.KEYDOWN, key=pygame.K_a, mod=pygame.KMOD_CTRL))
    game.handle_events()
    assert game.is_admin_panel_open

# Generated by Nicole LeGuern