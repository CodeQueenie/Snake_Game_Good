import sqlite3
import os
from utils import log_error

class Leaderboard:
    """
    Leaderboard class to manage the leaderboard database.
    """

    def __init__(self):
        """
        Initializes the Leaderboard and ensures the database directory exists.
        """
        # Ensure the database directory exists
        os.makedirs("database", exist_ok=True)
        self.conn = sqlite3.connect("database/leaderboard.db")
        self.create_table()

    def create_table(self):
        """
        Creates the leaderboard table if it does not exist.
        """
        try:
            with self.conn:
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS leaderboard (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        score INTEGER NOT NULL
                    )
                """)
        except Exception as e:
            log_error("create_table", str(e))

    def add_score(self, name, score):
        """
        Adds a new score to the leaderboard.

        Parameters
        ----------
        name : str
            The name of the player.
        score : int
            The score of the player.
        """
        try:
            with self.conn:
                self.conn.execute("""
                    INSERT INTO leaderboard (name, score)
                    VALUES (?, ?)
                """, (name, score))
        except Exception as e:
            log_error("add_score", str(e))

    def get_top_scores(self, limit=10):
        """
        Retrieves the top scores from the leaderboard.

        Parameters
        ----------
        limit : int, optional
            The number of top scores to retrieve (default is 10).

        Returns
        -------
        list of tuple
            A list of tuples containing the name and score of the top players.
        """
        try:
            cursor = self.conn.execute("""
                SELECT name, score
                FROM leaderboard
                ORDER BY score DESC
                LIMIT ?
            """, (limit,))
            return cursor.fetchall()
        except Exception as e:
            log_error("get_top_scores", str(e))
            return []

# Generated by Nicole LeGuern