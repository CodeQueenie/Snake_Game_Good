import sqlite3
import pygame
from utils import log_error

class AdminPanel:
    def __init__(self):
        self.conn = sqlite3.connect("database/leaderboard.db")
        self.create_user_table()
        self.create_settings_table()

    def create_user_table(self):
        """Creates the user table if it does not exist."""
        try:
            with self.conn:
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL
                    )
                """)
        except Exception as e:
            log_error("create_user_table", str(e))

    def create_settings_table(self):
        """Creates the settings table if it does not exist."""
        try:
            with self.conn:
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS settings (
                        id INTEGER PRIMARY KEY,
                        game_length INTEGER NOT NULL,
                        food_size INTEGER NOT NULL,
                        game_window_width INTEGER NOT NULL,
                        game_window_height INTEGER NOT NULL
                    )
                """)
        except Exception as e:
            log_error("create_settings_table", str(e))

    def manage_users(self):
        """Manage users (Create, Read, Update, Delete)."""
        # Implement user management logic here

    def configure_settings(self):
        """Configure game settings."""
        # Implement settings configuration logic here

    def load_settings(self):
        """Load game settings from the database."""
        try:
            cursor = self.conn.execute("SELECT * FROM settings WHERE id = 1")
            settings = cursor.fetchone()
            if settings:
                return {
                    "game_length": settings[1],
                    "food_size": settings[2],
                    "game_window_width": settings[3],
                    "game_window_height": settings[4]
                }
            else:
                return None
        except Exception as e:
            log_error("load_settings", str(e))
            return None

    def save_settings(self, settings):
        """Save game settings to the database."""
        try:
            with self.conn:
                self.conn.execute("""
                    INSERT OR REPLACE INTO settings (id, game_length, food_size, game_window_width, game_window_height)
                    VALUES (1, ?, ?, ?, ?)
                """, (settings["game_length"], settings["food_size"], settings["game_window_width"], settings["game_window_height"]))
        except Exception as e:
            log_error("save_settings", str(e))
# Generated by Nicole LeGuern